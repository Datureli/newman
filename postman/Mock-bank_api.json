    {
        "info": {
            "name": "Mock Bank API Tests",
            "description": "Kolekcja testów API dla fikcyjnego banku na Mocky",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
        },
        "item": [
            {
                "name": "Sprawdzenie salda",
                "request": {
                    "method": "GET",
                    "url": {
                        "raw": "{{MOCK_API_URL}}",
                        "protocol": "https",
                        "host": ["run", "mocky", "io"],
                        "path": ["v3", "{{MOCK_API_PATH}}"]
                    }
                },
                "response": [],
                "event": [
                    {
                        "listen": "test",
                        "script": {
                            "exec": [
                                "const jsonData = pm.response.json();",
                                "pm.test('Sprawdź czy saldo (balance) istnieje', function () {",
                                "    pm.expect(jsonData.balance).to.exist;",
                                "});",
                                "pm.test('Saldo (balance) jest liczbą', function () {",
                                "    pm.expect(jsonData.balance).to.be.a('number');",
                                "});",
                                "pm.test('Saldo (balance) jest większe od zera', function () {",
                                "    pm.expect(jsonData.balance).to.be.greaterThan(0);",
                                "});",
                                "pm.test('Waluta jest poprawna', function () {",
                                "    pm.expect(jsonData.currency).to.equal('USD');",
                                "});",
                                "pm.test('Nagłówek Content-Type jest poprawny', function () {",
                                "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                                "});",
                                "pm.test('Czas odpowiedzi jest poniżej 500ms', function () {",
                                "    pm.expect(pm.response.responseTime).to.be.below(500);",
                                "});"
                            ]
                        }
                    }
                ]
            },
            {
                "name": "Historia transakcji",
                "request": {
                    "method": "GET",
                    "url": {
                        "raw": "{{MOCK_API_URL}}",
                        "protocol": "https",
                        "host": ["run", "mocky", "io"],
                        "path": ["v3", "21d2d81e-c71d-4e10-9a50-66e01de030a8"]
                    }
                },
                "response": [],
                "event": [
                    {
                        "listen": "test",
                        "script": {
                            "exec": [
                                "const jsonData = pm.response.json();",
                                "pm.test('Sprawdź czy lista transakcji istnieje', function () {",
                                "    pm.expect(jsonData.transactions).to.exist;",
                                "});",
                                "pm.test('Transakcje to tablica', function () {",
                                "    pm.expect(jsonData.transactions).to.be.an('array');",
                                "});",
                                "pm.test('Każda transakcja ma pole amount', function () {",
                                "    jsonData.transactions.forEach(function(transaction) {",
                                "        pm.expect(transaction.amount).to.exist;",
                                "    });",
                                "});",
                                "jsonData.transactions.forEach(function(transaction) {",
                                "    pm.test(`Transakcja ${transaction.id} zawiera wszystkie wymagane pola`, function () {",
                                "        pm.expect(transaction).to.have.all.keys('id', 'amount', 'type', 'date');",
                                "    });",
                                "    pm.test(`Typ transakcji ${transaction.id} jest poprawny`, function () {",
                                "        pm.expect(transaction.type).to.satisfy(type => ['deposit', 'withdrawal'].includes(type));",
                                "    });",
                                "});",
                                "jsonData.transactions.forEach(function(transaction) {",
                                "    pm.test(`Data transakcji ${transaction.id} jest poprawna`, function () {",
                                "        const transactionDate = new Date(transaction.date);",
                                "        const isValidDate = !isNaN(transactionDate.getTime());",
                                "        pm.expect(isValidDate).to.be.true;",
                                "    });",
                                "});"
                            ]
                        }
                    }
                ]
            }
        ]
    }
